# system-prune.yml
# Playbook: Freiräumen von Docker‑Ressourcen, wenn Speicherplatz knapp wird
# ‑ Prüft vorab den freien Platz auf dem Docker‑Datenträger
# ‑ Führt "docker system prune" (und optional "--volumes") nur aus, wenn der
#   Grenzwert unterschritten ist
# ‑ Läuft idempotent und sicher im Check‑Mode
#
# Abhängigkeit: collection community.docker >= 3.9
#   ansible-galaxy collection install community.docker

---
- name: "Docker System Prune – platzgesteuert"
  hosts: "{{ target | default('docker_nodes') }}"
  gather_facts: true          # wir brauchen ansible_mounts
  become: true

  vars:
    docker_data_path: "/var/lib/docker"   # ggf. anpassen
    min_free_space_gb: 20                  # Schwellwert
    prune_volumes: false                   # true => auch dangling volumes löschen
    prune_dry_run: false                   # true => nur anzeigen, was gelöscht würde

  tasks:
    - name: "Ermittle Mount‑Info für Docker‑Datenpfad"
      ansible.builtin.set_fact:
        docker_mount: "{{ ansible_mounts | selectattr('mount', '==', docker_data_path) | list | first | default({}) }}"

    - name: "Freier Speicher (GB)"
      ansible.builtin.set_fact:
        docker_free_space_gb: "{{ (docker_mount.size_available | default(0)) // 1073741824 }}"

    - name: "Logge Freiraum vor Prune"
      ansible.builtin.debug:
        msg: "Host {{ inventory_hostname }} – freier Platz im Docker‑Storage: {{ docker_free_space_gb }} GB"

    - name: "Docker system prune, falls Schwellwert unterschritten"
      community.docker.docker_prune:
        containers: true
        images: true
        networks: true
        volumes: "{{ prune_volumes }}"
        builder_cache: true
        dry_run: "{{ prune_dry_run }}"
      when: docker_free_space_gb < min_free_space_gb
      register: prune_result
      changed_when: prune_result is defined and prune_result.pruned | length > 0

    - name: "Logge Ergebnis"
      ansible.builtin.debug:
        var: prune_result
      when: prune_result is defined
